generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/@prisma/generated-client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// Assignments

enum AssignmentStatus {
  CANCELED
  COMPLETE
  EXPIRED
  OUTSTANDING
}

type EncryptionKeyPair {
  publicKey  Bytes
  privateKey Bytes
}

model AssignmentModel {
  createdAt         DateTime               @default(now()) @db.DateTime
  updatedAt         DateTime               @updatedAt @db.DateTime
  id                String                 @id @default(uuid()) @map("_id") @db.UniqueIdentifier
  completedAt       DateTime?              @db.DateTime
  expiresAt         DateTime               @db.DateTime
  group             GroupModel?            @relation(fields: [groupId], references: [id])
  groupId           String?                @db.UniqueIdentifier
  instrument        InstrumentModel        @relation(fields: [instrumentId], references: [id])
  instrumentId      String                 @db.UniqueIdentifier
  instrumentRecord  InstrumentRecordModel? @relation(fields: [instrumentRecordId], references: [id])
  instrumentRecordId String?               @db.UniqueIdentifier
  status            AssignmentStatus
  subject           SubjectModel           @relation(fields: [subjectId], references: [id])
  subjectId         String                 @db.UniqueIdentifier
  url               String                 @db.NVarChar(2048)
  // encryptionKeyPair EncryptionKeyPair      @db.VarBinary(8000)
}

// Groups

enum GroupType {
  CLINICAL
  RESEARCH
}

enum SubjectIdentificationMethod {
  CUSTOM_ID
  PERSONAL_INFO
}

type ErrorMessage {
  en String?
  fr String?
}

type GroupSettings {
  defaultIdentificationMethod   SubjectIdentificationMethod
  idValidationRegex             String?
  idValidationRegexErrorMessage ErrorMessage?
}

model GroupModel {
  createdAt               DateTime                @default(now()) @db.Date
  updatedAt               DateTime                @updatedAt @db.Date
  id                      String                  @id @default(auto()) @map("_id") @db.Uuid
  name                    String                  @unique
  settings                GroupSettings
  type                    GroupType
  accessibleInstruments   InstrumentModel[]       @relation("GroupInstrument", fields: [accessibleInstrumentIds], references: [id])
  accessibleInstrumentIds String[]
  assignments             AssignmentModel[]
  instrumentRecords       InstrumentRecordModel[]
  sessions                SessionModel[]
  subjects                SubjectModel[]          @relation(fields: [subjectIds], references: [id])
  subjectIds              String[]
  userIds                 String[]                @db.Uuid
  users                   UserModel[]             @relation(fields: [userIds], references: [id])
}

model GroupInstrument {
  groupId       String
  instrumentId  String
  group         GroupModel   @relation(fields: [groupId], references: [id])
  instrument    InstrumentModel @relation(fields: [instrumentId], references: [id])
  @@id([groupId, instrumentId])
}

// Instrument Records

model InstrumentRecordModel {
  createdAt        DateTime         @default(now()) @db.Date
  updatedAt        DateTime         @updatedAt @db.Date
  id               String           @id @default(auto()) @map("_id") @db.Uuid
  computedMeasures Json?
  data             Json?
  date             DateTime         @db.Date
  group            GroupModel?      @relation(fields: [groupId], references: [id])
  groupId          String?          @db.Uuid
  subject          SubjectModel     @relation(fields: [subjectId], references: [id])
  subjectId        String
  instrument       InstrumentModel  @relation(fields: [instrumentId], references: [id])
  instrumentId     String
  assignment       AssignmentModel? @relation(fields: [assignmentId], references: [id])
  assignmentId     String?          @unique
  session          SessionModel     @relation(fields: [sessionId], references: [id])
  sessionId        String           @db.Uuid
}

// Instruments

enum InstrumentKind {
  FORM
  INTERACTIVE
  SERIES
}

type InstrumentInternal {
  name    String
  edition Float
}

model InstrumentModel {
  createdAt   DateTime                @default(now()) @db.Date
  updatedAt   DateTime                @updatedAt @db.Date
  id          String                  @id @map("_id")
  assignments AssignmentModel[]
  bundle      String
  records     InstrumentRecordModel[]
  groups      GroupModel[]            @relation("GroupInstrument", fields: [groupIds], references: [id])
  groupIds    String[]                @db.Uuid
}

// Subjects

enum Sex {
  MALE
  FEMALE
}

model SubjectModel {
  createdAt         DateTime                @default(now()) @db.Date
  updatedAt         DateTime                @updatedAt @db.Date
  id                String                  @id @map("_id")
  dateOfBirth       DateTime?               @db.Date
  firstName         String?
  groupIds          String[]                @db.Uuid
  groups            GroupModel[]            @relation(fields: [groupIds], references: [id])
  lastName          String?
  sessions          SessionModel[]
  sex               Sex?
  instrumentRecords InstrumentRecordModel[]
  assignments       AssignmentModel[]
}

enum BasePermissionLevel {
  ADMIN
  GROUP_MANAGER
  STANDARD
}

enum AppSubject {
  all
  Assignment
  Group
  Instrument
  InstrumentRecord
  Session
  Subject
  User
}

enum AppAction {
  create
  delete
  manage
  read
  update
}

type AuthRule {
  action  AppAction
  subject AppSubject
}

model UserModel {
  createdAt             DateTime             @default(now()) @db.Date
  updatedAt             DateTime             @updatedAt @db.Date
  id                    String               @id @default(auto()) @map("_id") @db.Uuid
  basePermissionLevel   BasePermissionLevel?
  additionalPermissions AuthRule[]
  firstName             String
  groupIds              String[]             @db.Uuid
  groups                GroupModel[]         @relation(fields: [groupIds], references: [id])
  lastName              String
  password              String
  username              String
  sex                   Sex?
  dateOfBirth           DateTime?            @db.Date
}

enum SessionType {
  RETROSPECTIVE
  IN_PERSON
  REMOTE
}

model SessionModel {
  createdAt         DateTime                @default(now()) @db.Date
  updatedAt         DateTime                @updatedAt @db.Date
  id                String                  @id @default(auto()) @map("_id") @db.Uuid
  date              DateTime                @db.Date
  group             GroupModel?             @relation(fields: [groupId], references: [id])
  groupId           String?                 @db.Uuid
  instrumentRecords InstrumentRecordModel[]
  subject           SubjectModel            @relation(fields: [subjectId], references: [id])
  subjectId         String
  type              SessionType
}

// Setup

model SetupStateModel {
  createdAt                     DateTime @default(now()) @db.Date
  updatedAt                     DateTime @updatedAt @db.Date
  id                            String   @id @default(auto()) @map("_id") @db.Uuid
  isDemo                        Boolean
  isExperimentalFeaturesEnabled Boolean?
  isSetup                       Boolean
}
