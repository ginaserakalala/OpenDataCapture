generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/@prisma/generated-client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// Enums

// Models

model AssignmentModel {
  assignmentModelId  Int                    @id @default(autoincrement()) @map("_id")
  createdAt          DateTime               @default(now()) @db.DateTime
  updatedAt          DateTime               @updatedAt @db.DateTime
  completedAt        DateTime?              @db.DateTime
  expiresAt          DateTime               @db.DateTime
  groupId            Int?
  group              GroupModel?            @relation(fields: [groupId], references: [groupId], onUpdate: NoAction, onDelete: NoAction)
  instrumentId       Int
  instrument         InstrumentModel        @relation(fields: [instrumentId], references: [instrumentModelId], onUpdate: NoAction, onDelete: NoAction)
  instrumentRecordId Int?                   @unique
  instrumentRecord   InstrumentRecordModel?
  status             String
  subjectId          Int
  subject            SubjectModel           @relation(fields: [assignmentModelId], references: [subjectModelId], onUpdate: NoAction, onDelete: NoAction)
  url                String                 @db.NVarChar(2048)
}

model GroupModel {
  groupId           Int                     @id @default(autoincrement()) @map("_id")
  createdAt         DateTime                @default(now()) @db.DateTime
  updatedAt         DateTime                @updatedAt @db.DateTime
  name              String                  @unique
  groupType         String
  assignments       AssignmentModel[]
  instrumentRecords InstrumentRecordModel[]
  sessions          SessionModel[]
  subjects          SubjectGroupModel[]     @relation("GroupSubjectRelation")
  users             UserGroupModel[]        @relation("UserGroupRelation")
  groupsInstruments GroupInstrument[]
  instrumentModelId Int?
  instrumentModel   InstrumentModel?        @relation(fields: [instrumentModelId], references: [instrumentModelId], onUpdate: NoAction, onDelete: NoAction)

  SubjectGroupModel SubjectGroupModel[]

  UserGroupModel UserGroupModel[]

  SubjectModel SubjectModel[] @relation("SubjectGroupModels")
}

model UserGroupModel {
  userGroupModelId Int          @id @default(autoincrement()) @map("_id")
  userId           Int
  groupId          Int
  user             UserModel    @relation(fields: [userId], references: [id])
  group            GroupModel   @relation(fields: [groupId], references: [groupId])
  UserModel        UserModel[]  @relation("UserGroupRelation")
  GroupModel       GroupModel[] @relation("UserGroupRelation")

  @@unique([userId, groupId])
}

model GroupInstrument {
  groupInstrumentId Int             @id @default(autoincrement()) @map("_id")
  groupId           Int
  group             GroupModel      @relation(fields: [groupId], references: [groupId])
  instrumentId      Int
  instrument        InstrumentModel @relation(fields: [instrumentId], references: [instrumentModelId])

  InstrumentModel InstrumentModel[] @relation(name: "GroupInstruments")
}

model InstrumentModel {
  instrumentModelId Int                     @id @default(autoincrement()) @map("_id")
  createdAt         DateTime                @default(now()) @db.DateTime
  updatedAt         DateTime                @updatedAt @db.DateTime
  assignments       AssignmentModel[]
  bundle            String
  records           InstrumentRecordModel[]
  groups            GroupInstrument[]       @relation(name: "GroupInstruments")
  GroupInstrument   GroupInstrument[]
  GroupModel        GroupModel[]
}

model InstrumentRecordModel {
  instrumentRecordModelId Int      @id @default(autoincrement()) @map("_id")
  createdAt               DateTime @default(now()) @db.DateTime
  updatedAt               DateTime @updatedAt @db.DateTime
  computedMeasures        String?
  data                    String?
  date                    DateTime @db.DateTime
  groupId                 Int?

  group             GroupModel?      @relation(fields: [groupId], references: [groupId])
  subjectId         Int
  subject           SubjectModel     @relation(fields: [subjectId], references: [subjectModelId])
  instrumentId      Int
  instrument        InstrumentModel  @relation(fields: [instrumentId], references: [instrumentModelId], onUpdate: NoAction, onDelete: NoAction)
  assignmentModelId Int?             @unique
  assignment        AssignmentModel? @relation(fields: [assignmentModelId], references: [assignmentModelId], onUpdate: NoAction, onDelete: NoAction)
  sessionId         Int
  session           SessionModel     @relation(fields: [sessionId], references: [sessionModelId], onUpdate: NoAction, onDelete: NoAction)
}

// Subjects

model SubjectModel {
  subjectModelId    Int                     @id @default(autoincrement()) @map("_id")
  createdAt         DateTime                @default(now()) @db.DateTime
  updatedAt         DateTime                @updatedAt @db.DateTime
  dateOfBirth       DateTime?               @db.DateTime
  firstName         String?
  lastName          String?
  sex               String? // Using String for sex
  groups            GroupModel[]            @relation("SubjectGroupModels")
  subjectsGroups    SubjectGroupModel[]
  sessions          SessionModel[]
  instrumentRecords InstrumentRecordModel[]
  assignments       AssignmentModel[]
}

model SubjectGroupModel {
  subjectGroupModelId Int          @id @default(autoincrement()) @map("_id")
  subjectId           Int
  groupId             Int
  subject             SubjectModel @relation(fields: [subjectGroupModelId], references: [subjectModelId])
  group               GroupModel   @relation(fields: [groupId], references: [groupId])
  GroupModel          GroupModel[] @relation("GroupSubjectRelation")

  @@unique([subjectId, groupId])
}

// User Roles and Permissions

// Users

model UserModel {
  id                  Int              @id @default(autoincrement()) @map("_id")
  createdAt           DateTime         @default(now()) @db.DateTime
  updatedAt           DateTime         @updatedAt @db.DateTime
  basePermissionLevel String?
  firstName           String
  lastName            String
  password            String
  username            String
  sex                 String?
  dateOfBirth         DateTime?        @db.DateTime
  groups              UserGroupModel[] @relation("UserGroupRelation")
  permissions         UserPermission[]

  UserGroupModel UserGroupModel[]
}

model UserPermission {
  id         Int       @id @default(autoincrement()) @map("_id")
  userId     Int
  permission String
  user       UserModel @relation(fields: [userId], references: [id])

  @@unique([userId, permission])
}

// Sessions
model SessionModel {
  sessionModelId    Int                     @id @default(autoincrement()) @map("_id")
  createdAt         DateTime                @default(now()) @db.DateTime
  updatedAt         DateTime                @updatedAt @db.DateTime
  date              DateTime                @db.DateTime
  groupId           Int?
  group             GroupModel?             @relation(fields: [groupId], references: [groupId])
  subjectId         Int
  subject           SubjectModel            @relation(fields: [subjectId], references: [subjectModelId])
  type              String
  instrumentRecords InstrumentRecordModel[]
}

// Setup

model SetupStateModel {
  id                            Int      @id @default(autoincrement()) @map("_id")
  createdAt                     DateTime @default(now()) @db.DateTime
  updatedAt                     DateTime @updatedAt @db.DateTime
  isDemo                        Boolean
  isExperimentalFeaturesEnabled Boolean?
  isSetup                       Boolean
}
