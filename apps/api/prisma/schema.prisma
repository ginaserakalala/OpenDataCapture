generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/@prisma/generated-client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Assignments

enum AssignmentStatus {
  CANCELED
  COMPLETE
  EXPIRED
  OUTSTANDING
}

model EncryptionKeyPair {
  id         String @id @default(uuid()) @db.Uuid
  publicKey  Bytes
  privateKey Bytes

  AssignmentModel AssignmentModel[]
}

model AssignmentModel {
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  id                  String                 @id @default(uuid())
  completedAt         DateTime?
  expiresAt           DateTime
  group               GroupModel?            @relation(fields: [groupId], references: [id])
  groupId             String                 @db.Uuid
  instrument          InstrumentModel        @relation(fields: [instrumentId], references: [id])
  instrumentId        String                 @db.Uuid
  instrumentRecord    InstrumentRecordModel?
  status              AssignmentStatus
  subject             SubjectModel           @relation(fields: [subjectId], references: [id])
  subjectId           String                 @db.Uuid
  url                 String
  encryptionKeyPairId String?                @db.Uuid
  encryptionKeyPair   EncryptionKeyPair?     @relation(fields: [encryptionKeyPairId], references: [id])
}

// Groups

enum GroupType {
  CLINICAL
  RESEARCH
}

enum SubjectIdentificationMethod {
  CUSTOM_ID
  PERSONAL_INFO
}

model ErrorMessage {
  id String  @id @default(uuid()) @db.Uuid
  en String?
  fr String?

  GroupSettings GroupSettings[]
}

model GroupSettings {
  id                              String                      @id @default(uuid()) @db.Uuid
  defaultIdentificationMethod     SubjectIdentificationMethod
  idValidationRegex               String?
  idValidationRegexErrorMessageId String?                     @db.Uuid
  idValidationRegexErrorMessage   ErrorMessage?               @relation(fields: [idValidationRegexErrorMessageId], references: [id])

  GroupModel GroupModel[]
}

model GroupModel {
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  id                      String                  @id @default(uuid()) @db.Uuid
  accessibleInstrumentIds String[]
  accessibleInstruments   InstrumentModel[]       @relation("AccessibleInstruments")
  assignments             AssignmentModel[]
  instrumentRecords       InstrumentRecordModel[]
  name                    String                  @unique
  settingsId              String                  @db.Uuid
  settings                GroupSettings           @relation(fields: [settingsId], references: [id])
  sessions                SessionModel[]
  subjects                SubjectModel[]
  subjectIds              String[]
  type                    GroupType
  userIds                 String[]                @db.Uuid
  users                   UserModel[]             @relation("Users")

  UserModel UserModel[]
}

// Instrument Records

model InstrumentRecordModel {
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  id               String           @id @default(uuid()) @db.Uuid
  computedMeasures Json?
  data             Json?
  date             DateTime
  group            GroupModel?      @relation(fields: [groupId], references: [id])
  groupId          String?          @db.Uuid
  subject          SubjectModel     @relation(fields: [subjectId], references: [id])
  subjectId        String           @db.Uuid
  instrument       InstrumentModel  @relation(fields: [instrumentId], references: [id])
  instrumentId     String           @db.Uuid
  assignment       AssignmentModel? @relation(fields: [assignmentId], references: [id])
  assignmentId     String?          @unique
  session          SessionModel     @relation(fields: [sessionId], references: [id])
  sessionId        String           @db.Uuid
}

// Instruments

enum InstrumentKind {
  FORM
  INTERACTIVE
  SERIES
}

model InstrumentInternal {
  id           String          @id @default(uuid())
  name         String
  edition      Float
  instrumentId String          @db.Uuid
  instrument   InstrumentModel @relation(fields: [instrumentId], references: [id])
}

model InstrumentModel {
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  id          String                  @id @default(uuid()) @db.Uuid
  assignments AssignmentModel[]
  bundle      String
  groups      GroupModel[]            @relation("AccessibleInstruments")
  groupIds    String[]                @db.Uuid
  records     InstrumentRecordModel[]

  InstrumentInternal InstrumentInternal[]
}

// Subjects

enum Sex {
  MALE
  FEMALE
}

model SubjectModel {
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  id                String                  @id @default(uuid()) @db.Uuid
  dateOfBirth       DateTime?
  firstName         String?
  groupIds          String[]                @db.Uuid
  groups            GroupModel[]
  lastName          String?
  sessions          SessionModel[]
  sex               Sex?
  instrumentRecords InstrumentRecordModel[]
  assignments       AssignmentModel[]
}

// Permissions

enum BasePermissionLevel {
  ADMIN
  GROUP_MANAGER
  STANDARD
}

enum AppSubject {
  all
  Assignment
  Group
  Instrument
  InstrumentRecord
  Session
  Subject
  User
}

enum AppAction {
  create
  delete
  manage
  read
  update
}

model AuthRule {
  id      String     @id @default(uuid())
  action  AppAction
  subject AppSubject

  UserModel UserModel[]
}

model UserModel {
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  id                    String               @id @default(uuid())
  basePermissionLevel   BasePermissionLevel?
  additionalPermissions AuthRule[]
  firstName             String
  groupIds              String[]             @db.Uuid
  groups                GroupModel[]
  lastName              String
  password              String
  username              String
  sex                   Sex?
  dateOfBirth           DateTime?

  GroupModel GroupModel[] @relation("Users")
}

// Sessions

enum SessionType {
  RETROSPECTIVE
  IN_PERSON
  REMOTE
}

model SessionModel {
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  id                String                  @id @default(uuid()) @db.Uuid
  date              DateTime
  group             GroupModel?             @relation(fields: [groupId], references: [id])
  groupId           String?                 @db.Uuid
  instrumentRecords InstrumentRecordModel[]
  subject           SubjectModel            @relation(fields: [subjectId], references: [id])
  subjectId         String                  @db.Uuid
  type              SessionType
}

// Setup

model SetupStateModel {
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  id                            String   @id @default(uuid())
  isDemo                        Boolean
  isExperimentalFeaturesEnabled Boolean?
  isSetup                       Boolean
}
