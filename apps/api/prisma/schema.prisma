generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/@prisma/generated-client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// Enums

// Models

model AssignmentModel {
  assignmentModelId  Int                    @id @default(autoincrement()) @map("_id")
  createdAt          DateTime               @default(now()) @db.DateTime
  updatedAt          DateTime               @updatedAt @db.DateTime
  completedAt        DateTime?              @db.DateTime
  expiresAt          DateTime               @db.DateTime
  groupId            Int?
  group              GroupModel?            @relation(fields: [groupId], references: [groupId], onUpdate: NoAction, onDelete: NoAction)
  instrumentId       String                 @db.UniqueIdentifier
  instrument         InstrumentModel        @relation(fields: [assignmentModelId], references: [instrumentModelId], onUpdate: NoAction, onDelete: NoAction)
  instrumentRecordId Int?                   @unique
  instrumentRecord   InstrumentRecordModel? @relation(references: [instrumentRecordModelId])
  status             String
  subjectId          Int
  subject            SubjectModel           @relation(fields: [assignmentModelId], references: [subjectModelId], onUpdate: NoAction, onDelete: NoAction)
  url                String                 @db.NVarChar(2048)
}

model GroupModel {
  groupId                     Int                     @id @default(autoincrement()) @map("_id")
  createdAt                   DateTime                @default(now()) @db.DateTime
  updatedAt                   DateTime                @updatedAt @db.DateTime
  name                        String                  @unique
  groupType                   String
  assignments                 AssignmentModel[]
  instrumentRecords           InstrumentRecordModel[]
  sessions                    SessionModel[]
  subjects                    SubjectModel[]
  users                       UserModel[]
  groupsInstruments           GroupInstrument[]
  InstrumentModel             InstrumentModel?        @relation(fields: [groupId], references: [instrumentModelId])
  instrumentModelId           Int?
  instrumentModelInstrumentId Int?

  SubjectGroupModel                SubjectGroupModel[]
  InstrumentModel                  InstrumentModel?    @relation(fields: [instrumentModelInstrumentModelId], references: [instrumentModelId])
  instrumentModelInstrumentModelId Int?
  SubjectModel                     SubjectModel?       @relation(fields: [subjectModelSubjectModelId], references: [subjectModelId])
  subjectModelSubjectModelId       Int?
}

model GroupInstrument {
  groupInstrumentId Int             @id @default(autoincrement()) @map("_id")
  groupId           String          @db.UniqueIdentifier
  group             GroupModel      @relation(fields: [groupId], references: [groupId])
  instrumentId      Int
  instrument        InstrumentModel @relation(fields: [groupInstrumentId], references: [instrumentModelId])
}

model InstrumentModel {
  instrumentModelId Int                     @id @map("_id")
  createdAt         DateTime                @default(now()) @db.DateTime
  updatedAt         DateTime                @updatedAt @db.DateTime
  assignments       AssignmentModel[]
  bundle            String
  records           InstrumentRecordModel[]
  groups            GroupModel[]            @relation("GroupInstrument", fields: [instrumentModelId], references: [groupId])
  GroupInstrument   GroupInstrument[]
  GroupModel        GroupModel[]
}

model InstrumentRecordModel {
  instrumentRecordModelId Int              @id @default(autoincrement()) @map("_id")
  createdAt               DateTime         @default(now()) @db.DateTime
  updatedAt               DateTime         @updatedAt @db.DateTime
  computedMeasures        Json?
  data                    Json?
  date                    DateTime         @db.DateTime
  groupId                 String?          @db.UniqueIdentifier
  group                   GroupModel?      @relation(fields: [instrumentRecordModelId], references: [groupId])
  subjectId               String
  subject                 SubjectModel     @relation(fields: [instrumentRecordModelId], references: [subjectModelId])
  instrumentId            String
  instrument              InstrumentModel  @relation(fields: [instrumentRecordModelId], references: [instrumentModelId], onUpdate: NoAction, onDelete: NoAction)
  assignmentModelId       Int?
  assignment              AssignmentModel? @relation(fields: [assignmentModelId], references: [assignmentModelId])
  sessionId               String           @db.UniqueIdentifier
  session                 SessionModel     @relation(fields: [instrumentRecordModelId], references: [sessionModelId], onUpdate: NoAction, onDelete: NoAction)
}

// Subjects

model SubjectModel {
  subjectModelId    Int                     @id @default(autoincrement()) @map("_id") // Changed to Int and added @default(autoincrement())
  createdAt         DateTime                @default(now()) @db.DateTime
  updatedAt         DateTime                @updatedAt @db.DateTime
  dateOfBirth       DateTime?               @db.DateTime
  firstName         String?
  lastName          String?
  sex               String? // Using String for sex
  groups            GroupModel[]            @relation("SubjectGroupModels")
  subjectsGroups    SubjectGroupModel[]
  sessions          SessionModel[]
  instrumentRecords InstrumentRecordModel[]
  assignments       AssignmentModel[]
  GroupModel        GroupModel?             @relation(fields: [groupModelGroupId], references: [groupId])
  groupModelGroupId Int?
}

model SubjectGroupModel {
  subjectGroupModelId Int          @id @default(autoincrement()) @map("_id")
  subjectId           Int
  groupId             Int
  subject             SubjectModel @relation(fields: [subjectGroupModelId], references: [subjectModelId])
  group               GroupModel   @relation(fields: [groupId], references: [groupId])

  @@unique([subjectId, groupId])
}

// User Roles and Permissions

// Users

model UserModel {
  id                    Int          @id @default(autoincrement()) @map("_id")
  createdAt             DateTime     @default(now()) @db.DateTime
  updatedAt             DateTime     @updatedAt @db.DateTime
  basePermissionLevel   String?
  additionalPermissions String[]
  firstName             String
  lastName              String
  password              String
  username              String
  sex                   String?
  dateOfBirth           DateTime?    @db.DateTime
  groups                GroupModel[] @relation(fields: [groupIds], references: [groupId])
  groupIds              String[]     @db.Uuid
}

// Sessions
model SessionModel {
  sessionModelId    Int                     @id @default(autoincrement()) @map("_id")
  createdAt         DateTime                @default(now()) @db.DateTime
  updatedAt         DateTime                @updatedAt @db.DateTime
  date              DateTime                @db.DateTime
  groupId           String?                 @db.UniqueIdentifier
  group             GroupModel?             @relation(fields: [sessionModelId], references: [groupId])
  subjectId         Int
  subject           SubjectModel            @relation(fields: [subjectId], references: [subjectModelId])
  type              String
  instrumentRecords InstrumentRecordModel[]
}

// Setup

model SetupStateModel {
  id                            Int      @id @default(autoincrement()) @map("_id")
  createdAt                     DateTime @default(now()) @db.DateTime
  updatedAt                     DateTime @updatedAt @db.DateTime
  isDemo                        Boolean
  isExperimentalFeaturesEnabled Boolean?
  isSetup                       Boolean
}
